name: libp2p Ping Pong in JS

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: 16
    - name: Create project
      run: |
        mkdir hello-libp2p
        mkdir hello-libp2p/src
        cd hello-libp2p
        git init .
        npm init es6
    - name: Install dependencies
      run: |
        npm install libp2p
        npm install @libp2p/tcp
        npm install @chainsafe/libp2p-noise
        npm install @libp2p/mplex
        npm install multiaddr
    - name: Run tutorial
      run: |
        node -e "import process from 'node:process'; import { createLibp2p } from 'libp2p'; import { tcp } from '@libp2p/tcp'; import { noise } from '@chainsafe/libp2p-noise'; import { mplex } from '@libp2p/mplex'; import { multiaddr } from 'multiaddr';
        const node = await createLibp2p({
          addresses: {
                      // add a listen address (localhost) to accept TCP connections on a random port
            listen: ['/ip4/127.0.0.1/tcp/0']
          },
          transports: [tcp()],
          connectionEncryption: [noise()],
          streamMuxers: [mplex()]
        });
        // start libp2p
        await node.start();
        console.log('libp2p has started');
        // print out listening addresses
        console.log('listening on addresses:');
        node.getMultiaddrs().forEach((addr) => {
          console.log(addr.toString())
        });
        // ping peer if received multiaddr
        if (process.argv.length >= 3) {
          const ma = multiaddr(process.argv[2])
          console.log(`pinging remote peer at ${process.argv[2]}`)
          const latency = await node.ping(ma)
          console.log(`pinged ${process.argv[2]} in ${latency}ms`)
        } else {
          console.log('no remote peer address given, skipping ping')
        }
        const stop = async () => {
          // stop libp2p
          await node.stop()
          console.log('libp2p has stopped')
          process.exit(0)
        }
        process.on('SIGTERM', stop)
        process.on('SIGINT', stop)"

           
